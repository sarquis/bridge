
橋 Bridge

!!! Atenção !!! PENSAR SEMPRE EM MVP, NADA DE COMPLICAR FAZER RODAR DEPOIS IR MELHORANDO.

FAZENDO:


criar exceções diversas...

---
A melhor prática é ter a lógica relacionada às mensagens a serem exibidas para o usuário no controlador, 

enquanto o serviço deve se concentrar na lógica de negócios e manipulação de dados. 

O serviço pode lançar exceções específicas ou fornecer algum tipo de sinal para indicar ao controlador que algo inesperado ocorreu, 
e o controlador seria responsável por mapear essas informações em mensagens significativas para o usuário.

Aqui estão alguns passos que você pode seguir para lidar com mensagens no contexto de um método para alterar senha:
1.	Serviço (Service):
o	O serviço deve conter a lógica de negócios para a alteração da senha.
o	Pode lançar exceções ou usar algum mecanismo para indicar o sucesso ou falha da operação.
java
@Service
public class UsuarioService {

    public void alterarSenha(String senhaAtual, String novaSenha) throws SenhaAtualIncorretaException {
        // Lógica para verificar se a senha atual está correta e realizar a alteração
        // Lança uma exceção personalizada se a senha atual estiver incorreta
    }
}
2.	Controlador (Controller):
o	O controlador deve chamar o serviço para realizar a operação desejada.
o	Captura exceções ou verifica o resultado da operação e adiciona mensagens ao modelo.
java
@Controller
@RequestMapping("/usuario")
public class UsuarioController {

    @Autowired
    private UsuarioService usuarioService;

    @PostMapping("/alterar-senha")
    public String alterarSenha(@RequestParam String senhaAtual, @RequestParam String novaSenha, Model model) {
        try {
            usuarioService.alterarSenha(senhaAtual, novaSenha);
            model.addAttribute("mensagemSucesso", "Senha alterada com sucesso!");
        } catch (SenhaAtualIncorretaException e) {
            model.addAttribute("mensagemErro", "Senha atual incorreta. Tente novamente.");
        } catch (Exception e) {
            model.addAttribute("mensagemErro", "Ocorreu um erro ao alterar a senha.");
        }

        return "paginaResultado";
    }
}
3.	Template Thymeleaf:
o	O template Thymeleaf pode acessar essas mensagens no modelo e exibi-las para o usuário.
html
<!-- paginaResultado.html -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <!-- Cabeçalho da página -->
</head>
<body>
    <div th:if="${mensagemSucesso}">
        <p th:text="${mensagemSucesso}" style="color: green;"></p>
    </div>
    <div th:if="${mensagemErro}">
        <p th:text="${mensagemErro}" style="color: red;"></p>
    </div>
    <!-- Restante do conteúdo da página -->
</body>
</html>
Isolando a lógica de apresentação de mensagens no controlador e template Thymeleaf, você mantém a separação de responsabilidades e facilita a manutenção do código. O serviço continua sendo responsável apenas pela lógica de negócios.





























		
		3. fazer o alterar senha (validar tamanho, letras e numeros)
		- colocar javascript para mostrar se senha esta boa.
		- quando fizer, colocar no cadastro de usuario do admin tambem 
				
		4. senha por e-mail registro de usuario
		- quem cadastrou tambem, se foi admin ou se foi sozinho.
		- colocar o tipo de cadastro admin/usuario
		- criar o esqueci minha senha.
		
		4. colocar botão para exibir os inativos.
			ocultar os inativos normalmente.
		5. ver como usar a strategia do infinite-scrolling...
		acho que não é uma boa nao, colocar paginação é melhor... nao sei... 
		acho que como é light, o infite -scrolling pode ser uma boa.. testar...	  	
	
	
A FAZER:

	***********
	* ATENÇÃO ! MUITO CUIDADO COM A QUESTÃO DO INPUT HIDDEN ID
	* Necessário que o controller sempre valide a requisição, para saber o que esta sendo feito e por quem.
	***********

	- quando for fazer a parte de registro do usuario
	- validar e-mail (minimo, se tem @ já basta)
	- validar senha (minimo 8, com letas e numeros)
	- quando for fazer a funcao de registro do usuario ver como ficou o usuario de auditoria

	- novo botão: criar uma conta
	- criar o esqueceu sua senha
	
	-- infinite-scrolling : https://www.uxmatters.com/mt/archives/2020/07/designing-mobile-tables.php
	-- https://medium.com/appnroll-publication/5-practical-solutions-to-make-responsive-data-tables-ff031c48b122
	-- Collapsed
	
BACKLOG:

	- criar uma pagina default para erros não tratados, forcar um erro de thymeleaf qualquer para testar.
	
	- criar botão de "registro de novo usuario" "Criar uma conta"
	- criar esqueci minha senha.
	
	- ver como instalar no celular
	
	- bloqueio de usuario por tentativas
	- all logging to a table 
	- fazer funcionalidade do registro com envio para e-mail de senha
	- colocar questão da senha segura nao permitir senhas fáceis
	
	- logar os erros do sistema em uma tabela, onde só o admin veja.